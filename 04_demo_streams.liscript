



; абстракция списка через лямбды
  демонстрация 
    (def a (s-cons 1 2))
    (print a \n)
    (print (s-head a) \n)
    (print (s-tail a) \n)
  библиотечные функции
  примеры на списках - test
;
(defn s-cons (x y) (lambda (c) cond (= 0 c) x y))
(defn s-head (s) s 0)
(defn s-tail (s) s 1)




; абстракция списка через другие лямбды - по Черчу
  примеры на списках - test
;
(defn s-cons (x y) (lambda (f) f x y))
(defn s-head (s) s (lambda (x y) x))
(defn s-tail (s) s (lambda (x y) y))




; абстракция потока через лямбды в макросе
  примеры на списках - test
  переход к ленивым вычислениям
    (s-cons (+ 1 2) (/ 5 0))
  примеры на потоках - ones, nats, fibs-iter, неоптимальный fibs-exp
;
(defmacro s-cons (x y) (lambda (c) cond (= 0 c) x y))
(defn s-head (s) s 0)
(defn s-tail (s) s 1)

(def n-fibs-exp 7 n-primes-erat 7 n-primes-bert 7 n-hamm 8 n-euler-pi 5 n-accelerated-pi 2)




; абстракция потока через НЕ мемоизированный delay
  примеры на delay - force
    (def a (delay (+ 7 6)))
    (print \n "запомнили отложенное вычисление: " a \n)
    (print "вычислили результат: " (force a) \n)
  примеры на потоках - ones, nats, fibs-iter, неоптимальный fibs-exp
;
(defmacro delay (expr) (lambda () expr))
(defn force (promise) (promise))

(defmacro s-cons (x y) (cons x (delay y)))
(def s-head car)
(defn s-tail (s) force (cadr s))

;(defn s-tail (s) (def t (cdr s) e (car t)) (cond (lambda? e) (force e) t))
;
(def n-fibs-exp 7 n-primes-erat 7 n-primes-bert 7 n-hamm 8 n-euler-pi 5 n-accelerated-pi 2)




; абстракция МЕМОИЗИРОВАННОГО потока через мемоизированную УНАРНУЮ лямбду
  примеры на потоках - быстрый мемоизированный fibs-exp, и ВООБЩЕ ВСЕ
;
(defn memo-lambda-2 (fn)
    (def already-run-0? false result-0 false
		 already-run-1? false result-1 false)
    (lambda (c)
        (cond (= 0 c) (cond already-run-0? result-0
			             ((set! result-0 (fn 0) already-run-0? true) result-0))
			          (cond already-run-1? result-1
			             ((set! result-1 (fn 1) already-run-1? true) result-1)) )))

(defn memo-lambda-2 (fn)
    (def result-0 (fn 0)
		 already-run-1? false result-1 false)
    (lambda (c)
        (cond (= 0 c) result-0
			  already-run-1? result-1
			  ((set! result-1 (fn 1) already-run-1? true) result-1)) ))

(defmacro s-cons (x y) (memo-lambda-2 (lambda (c) cond (= 0 c) x y)))
(defn s-head (s) s 0)
(defn s-tail (s) s 1)

(def n-fibs-exp 20 n-primes-erat 10 n-primes-bert 15 n-hamm 30 n-euler-pi 8 n-accelerated-pi 8)




; абстракция МЕМОИЗИРОВАННОГО потока через CONS или LAMBDA и мемоизированный delay
  примеры на потоках - быстрый мемоизированный fibs-exp, и ВООБЩЕ ВСЕ
;
(defn memo-proc (proc)
    (def already-run? false result false)
    (lambda ()
        (cond already-run? result
              ((set! result (proc) already-run? true) result) )))

(defmacro s-cons (x y) (cons x (memo-proc (lambda () y))))
(def s-head car)
(defn s-tail (s) (cadr s) 0)

;
(defn s-cons-core (x y) (lambda (c) cond (= 0 c) x y))
(defmacro s-cons (x y) s-cons-core x (memo-proc (lambda () y)))
(defn s-head (s) s 0)
(defn s-tail (s) (s 1) 0)
;

(def n-fibs-exp 20 n-primes-erat 10 n-primes-bert 15 n-hamm 30 n-euler-pi 8 n-accelerated-pi 8)





; ////////////////////////////////////////////////////////////////////////////////////
  БАЗОВЫЕ ФУНКЦИИ НА КАСТОМНЫХ СПИСКАХ
;
(defn to-list (s)
    (cond (null? s) nil
          (cons (s-head s) (to-list (s-tail s)))))

(defn s-take (n l)
    (cond (null? l) nil
          (> n 0) (cons (s-head l) (s-take (- n 1) (s-tail l)))
          nil))
		  
(defn s-ref (n s) (cond (null? s) nil (= 0 n) (s-head s) (s-ref (- n 1) (s-tail s)) ))

(defn s-map (f s) (cond (null? s) nil (s-cons (f (s-head s)) (s-map f (s-tail s)))) )

(defn s-filter (f s)
    (cond (null? s) nil
		  (f (s-head s)) (s-cons (s-head s) (s-filter f (s-tail s)))
                         (s-filter f (s-tail s)) ))
						 
(defn s-foldl (f a l) (cond (null? l) a (s-foldl f (f (s-head l) a) (s-tail l)) ))
		  
(defn s-foldr (f a l) (cond (null? l) a (f (s-head l) (s-foldr f a (s-tail l))) ))
		  
(defn s-zipwith (f s1 s2)
	(cond (or (null? s1) (null? s2)) nil 
		  (s-cons (f (s-head s1) (s-head s2)) (s-zipwith f (s-tail s1) (s-tail s2))) ))

(defn s-sum (s1 s2) (s-zipwith + s1 s2))





; ////////////////////////////////////////////////////////////////////////////////////
  ПРИМЕРЫ НА СПИСКАХ
;
(print \n "ЗАДАЧА - кастомные списки:" \n \n)

(defmacro show-s-cons (e)
	(print (quote e) " = " e \n
		   "s-head = " (s-head e) \n
		   "s-tail = " (s-tail e) \n
	))
(show-s-cons (s-cons (+ 1 2) (* 3 4)))

(defn test (a)
	(print \n)
	(print "список: " (to-list a) \n)
	(print "голова: " (s-head a) \n)
	(print "хвост: " (to-list (s-tail a)) \n)
	(print "мап (* 10): " (to-list (s-map (lambda (x) * 10 x) a)) \n)
	(print "фильтр нечетных: " (to-list (s-filter (lambda (x) = 1 (mod x 2)) a)) \n)
	(print "реверс: " (to-list (s-foldl s-cons nil a)) \n)
	(print "сумма элементов: " (s-foldl + 0 a) \n)
)

(def a (s-cons 2 (s-cons 5 (s-cons 4 (s-cons 7 nil)))))
(test a)

(defn s-list-from-to (a b)
    (defn go (i l) (cond (< i a) l (go (- i 1) (s-cons i l)) ))
    (go b nil))

(def b (s-list-from-to 1 10))
(test b)

(print \n)
(print "поэлементная сумма списков выше: " (to-list (s-zipwith + a b)) \n \n)






; ////////////////////////////////////////////////////////////////////////////////////
  ПРИМЕРЫ НА БЕСКОНЕЧНЫХ СПИСКАХ - ПОТОКАХ
;
(print \n "ЗАДАЧА - бесконечные списки - потоки:" \n)


; поток единиц
;
(def ones (s-cons 1 ones))
(print \n "поток единиц: " ones \n)
(print "первые " 20 " членов потока единиц:" \n)
(print (s-take 20 ones) \n)


; поток натуральных чисел, начиная с заданного
;
(defn int-from (n) (s-cons n (int-from (+ n 1))))
(def nats (int-from 1))
(print \n "первые " 20 " членов потока натуральных чисел с 1:" \n)
(print (s-take 20 nats) \n)

; сумма потоков
;
(print \n "первые " 15 " членов потока - суммы потоков чисел с 0 и со 100:" \n)
(print (s-take 15 (s-sum (int-from 0) (int-from 100))) \n)


; поток Фибоначчи - НЕ экспоненциальный расчет
;
(defn fibgen (a b) (s-cons a (fibgen b (+ a b))))
(def fibs-iter (fibgen 0 1))
(print \n "первые " 20 " членов потока ряда Фибоначчи (НЕ экспоненциальный расчет):" \n)
(print (s-take 20 fibs-iter) \n)

; экспоненциальный расчет
;
(def fibs-exp (s-cons 0 (s-cons 1 (s-sum (s-tail fibs-exp) fibs-exp))))
(print \n "первые " n-fibs-exp " членов потока ряда Фибоначчи (экспоненциальный расчет):" \n)
(print (s-take n-fibs-exp fibs-exp) \n)


; ОСТАЛЬНЫЕ ПРИМЕРЫ ПОТОКОВ
;

; поток четных чисел
;
(def evens (s-filter (lambda (x) (= 0 (mod x 2))) (int-from 0)))
(def n 20)
(print \n "первые " n " четных чисел:" \n)
(print (s-take n evens) \n)

; решето Эратосфена, поток простых чисел
;
(defn sieve (s)
    (def r (s-filter (lambda (x) (/= 0 (mod x (s-head s)))) (s-tail s)))
    (s-cons (s-head s) (sieve r)))
(def primes-Erat (sieve (int-from 2)))
(print \n "первые " n-primes-erat " простых чисел через решето Эратосфена:" \n)
(print (s-take n-primes-erat primes-Erat) \n)

; поток простых чисел через гипотезу Бертрана
;
(def primes-Bert (s-cons 2 (s-filter prime? (int-from 3))))
(defn prime? (n)
    (defn square (n) (* n n))
    (defn iter (ps)
        (cond (> (square (s-head ps)) n) true
              (= 0 (mod n (s-head ps))) false
              (iter (s-tail ps)) ))
    (iter primes-Bert))
(print \n "первые " n-primes-bert " простых чисел через гипотезу Бертрана:" \n)
(print (s-take n-primes-bert primes-Bert) \n)

; мердж и числа Хэмминга
;
(defn merge (s1 s2)
    (cond (null? s1) s2
          (null? s2) s1
          (< (s-head s1) (s-head s2)) (s-cons (s-head s1) (merge (s-tail s1) s2))
          (> (s-head s1) (s-head s2)) (s-cons (s-head s2) (merge s1 (s-tail s2)))
                                (s-cons (s-head s1) (merge (s-tail s1) (s-tail s2))) ))
(defn s-scale (k s) (s-map (lambda (x) (* k x)) s))
(def hamm (s-cons 1 (merge (s-scale 2 hamm) (merge (s-scale 3 hamm) (s-scale 5 hamm)) )))
(print \n "числа Хэмминга:" \n)
(print (s-take n-hamm hamm) \n)

; поток частичных сумм любого потока
;
(defn partial-sums (f s)
    (defn go (a s) (s-cons (f a (s-head s)) (go (f a (s-head s)) (s-tail s)) ))
    (go 0 s))
(print \n "частичные суммы натурального ряда:" \n)
(print (s-take 20 (partial-sums + (int-from 1))) \n)

; интегрирование потоков - степенных рядов
  экспонента
;
(defn s-integrate (s)
    (defn go (n s) (s-cons (/ (s-head s) n) (go (+ n 1) (s-tail s)) ))
    (go 1.0 s))
(def s-exp (s-cons 1.0 (s-integrate s-exp)))
(print \n "ряд частичных сумм экспоненты от 1:" \n)
(print (s-take 8 (partial-sums + s-exp)) \n)

; синус-косинус
;
(defn s-scale (k s) (s-map (lambda (x) (* k x)) s))
(def s-cos (s-cons 1.0 (s-integrate (s-scale -1 s-sin))))
(def s-sin (s-cons 0.0 (s-integrate s-cos)))
(print \n "ряд синуса 1:  " \n (s-take 10 (partial-sums + s-sin)) \n)
(print \n "ряд косинуса 1:" \n (s-take 10 (partial-sums + s-cos)) \n)

; поток приближений квадратного корня
;
(defn average (x y) (/ (+ x y) 2))
(defn sqrt-improve (guess x) (average guess (/ x guess)))
(defn sqrt-stream (x)
    (defn r () (s-map (lambda (guess) (sqrt-improve guess x)) (sqrt-stream x)))
    (s-cons 1.0 (r)))
(print \n "ряд приближений к квадратному корню из 16:" \n)
(print (s-take 8 (sqrt-stream 16)) \n)

; приближение к числу пи
;
(defn pi-summands (n)
    (defn r () (s-map (lambda (x) (- 0 x)) (pi-summands (+ n 2))))
    (s-cons (/ 1.0 n) (r)))
(def pi-stream (s-scale 4.0 (partial-sums + (pi-summands 1))))
(print \n "ряд приближений к числу пи:" \n)
(print (s-take 8 pi-stream) \n)

; трансформация Эйлера - ускоритель сходимости ряда
;
(defn euler-transform (s)
    (defn square (x) (* x x))
    (def s0 (s-ref 0 s))
    (def s1 (s-ref 1 s))
    (def s2 (s-ref 2 s))
    (s-cons (- s2 (/ (square (- s2 s1)) (+ s0 (* -2 s1) s2))) (euler-transform (s-tail s))))
(print \n "ряд приближений к числу пи - однократное применение Эйлера:" \n)
(print (s-take n-euler-pi (euler-transform pi-stream)) \n)

(defn make-tableau (t s) (s-cons s (make-tableau t (t s))))
(defn accelerated-sequence (s) (s-map s-head (make-tableau euler-transform s)))
(print \n "ряд приближений к числу пи - последовательное применение Эйлера:" \n)
(print (s-take n-accelerated-pi (accelerated-sequence pi-stream)) \n)


;
(defn integral (delayed-integrand initial-value dt)
    (def int (s-cons initial-value
        (s-zipwith + (s-scale dt (force delayed-integrand)) int)))
    int)
(defn solve (f y0 dt)
    (def y  (integral (delay-memo dy) y0 dt))
    (def dy (s-map f y))
    y)
(print \n "какой-то непонятный диффур из SICP:" \n)
(print (s-ref 20 (solve (lambda (y) y) 1 0.01)) \n)
;

"
Код данных примеров вы можете посмотреть в файле."
